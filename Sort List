/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
      
      ListNode slow  = head;
      ListNode fast = head;
      ListNode prev = null;
      while(fast != null && fast.next != null){
        prev = slow;
        slow = slow.next;
        fast = fast.next.next;
      }
      
        return prev;
    }
  public ListNode merge(ListNode list1, ListNode list2) {
      
      ListNode list = new ListNode(-1);
      ListNode curr = list;
      
      while(list1 != null && list2 != null){
        
        if(list1.val<list2.val){
          curr.next = list1;
          list1 = list1.next;
        } else{
          curr.next = list2;
          list2 = list2.next;
        }
        curr = curr.next;
      }
      
      if(list1 != null ){
          curr.next = list1;
          // list1 = list1.next;
      }
      if(list2 != null){
          curr.next = list2;
          // list2 = list2.next;
      }
        
      return list.next;
    }
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
          return head;
        }
      
      ListNode mid = middleNode(head);
      ListNode h1 = head;
      ListNode h2 = mid.next;
      mid.next = null;
      h1 = sortList(h1);
      h2 = sortList(h2);
      
      return merge(h1, h2);
    }
}
