/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(-1);
        ListNode p1 = dummy;
      
      int work = size(head)/k;
      ListNode prev = head, curr = head;
      while(work != 0){
        int temp = k-1;
        while(temp != 0){
          curr = curr.next;
          temp--;
        }
        ListNode nbr = curr.next;
        curr.next = null;
        reverseList(prev);
        p1.next = curr;
        p1 = prev;
        curr = prev = nbr;
        work--;
      }
      p1.next = curr;
      return dummy.next;
    }
  public static int size(ListNode head){
    ListNode curr = head;
    int size = 0;
    while(curr != null){
      curr = curr.next;
      size++;
    }
    return size;
  }
  public static ListNode reverseList(ListNode head) {
      
      ListNode prev = null;
      ListNode curr = head;
      
      if(head == null && head.next != null  ){
        return head;
      }
      
      while(curr!=null)
        {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}
